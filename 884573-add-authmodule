# HG changeset patch
# Parent 9ab28833eda00abf3dd3099f2a21798691887c74

diff --git a/dom/media/PeerConnection.js b/dom/media/PeerConnection.js
--- a/dom/media/PeerConnection.js
+++ b/dom/media/PeerConnection.js
@@ -3,16 +3,18 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/PopupNotifications.jsm");
+Cu.import('resource://gre/modules/identity/RTCIdentity.jsm');
 
 const PC_CONTRACT = "@mozilla.org/dom/peerconnection;1";
 const PC_ICE_CONTRACT = "@mozilla.org/dom/rtcicecandidate;1";
 const PC_SESSION_CONTRACT = "@mozilla.org/dom/rtcsessiondescription;1";
 const PC_MANAGER_CONTRACT = "@mozilla.org/dom/peerconnectionmanager;1";
 const PC_ICEEVENT_CONTRACT = "@mozilla.org/dom/rtcpeerconnectioniceevent;1";
 const MSEVENT_CONTRACT = "@mozilla.org/dom/mediastreamevent;1";
 const DCEVENT_CONTRACT = "@mozilla.org/dom/datachannelevent;1";
@@ -22,16 +24,17 @@ const PC_ICE_CID = Components.ID("{02b99
 const PC_SESSION_CID = Components.ID("{1775081b-b62d-4954-8ffe-a067bbf508a7}");
 const PC_MANAGER_CID = Components.ID("{7293e901-2be3-4c02-b4bd-cbef6fc24f78}");
 const PC_ICEEVENT_CID = Components.ID("{b9cd25a7-9859-4f9e-8f84-ef5181ff36c0}");
 const MSEVENT_CID = Components.ID("{a722a8a9-2290-4e99-a5ed-07b504292d08}");
 const DCEVENT_CID = Components.ID("{d5ed7fbf-01a8-4b18-af6c-861cf2aac920}");
 
 // Global list of PeerConnection objects, so they can be cleaned up when
 // a page is torn down. (Maps inner window ID to an array of PC objects).
+//
 function GlobalPCList() {
   this._list = [];
   this._networkdown = false; // XXX Need to query current state somehow
   Services.obs.addObserver(this, "inner-window-destroyed", true);
   Services.obs.addObserver(this, "profile-change-net-teardown", true);
   Services.obs.addObserver(this, "network:offline-about-to-go-offline", true);
   Services.obs.addObserver(this, "network:offline-status-changed", true);
 }
@@ -228,21 +231,29 @@ function RTCPeerConnection() {
   this._pc = null;
   this._observer = null;
   this._closed = false;
 
   this._onCreateOfferSuccess = null;
   this._onCreateOfferFailure = null;
   this._onCreateAnswerSuccess = null;
   this._onCreateAnswerFailure = null;
+  this._onIdentityAssertionSuccess = null;
 
   this._pendingType = null;
   this._localType = null;
   this._remoteType = null;
 
+  this._peerIdentity = {
+    idp: null,
+    name: null
+  };
+
+  this._fingerprint = null;
+
   /**
    * Everytime we get a request from content, we put it in the queue. If
    * there are no pending operations though, we will execute it immediately.
    * In PeerConnectionObserver, whenever we are notified that an operation
    * has finished, we will check the queue for the next operation and execute
    * if neccesary. The _pending flag indicates whether an operation is currently
    * in progress.
    */
@@ -280,20 +291,24 @@ RTCPeerConnection.prototype = {
     this.makeGetterSetterEH("onicecandidate");
     this.makeGetterSetterEH("onnegotiationneeded");
     this.makeGetterSetterEH("onsignalingstatechange");
     this.makeGetterSetterEH("onremovestream");
     this.makeGetterSetterEH("ondatachannel");
     this.makeGetterSetterEH("onconnection");
     this.makeGetterSetterEH("onclosedconnection");
     this.makeGetterSetterEH("oniceconnectionstatechange");
+    this.makeGetterSetterEH("onidentityresult");
 
     this._pc = Cc["@mozilla.org/peerconnection;1"].
              createInstance(Ci.IPeerConnection);
     this._observer = new PeerConnectionObserver(this);
+
+    this._idp = new PeerConnectionIDP(this);
+
     this._winID = this._win.QueryInterface(Ci.nsIInterfaceRequestor)
                            .getInterface(Ci.nsIDOMWindowUtils).currentInnerWindowID;
 
     // Add a reference to the PeerConnection to global list (before init).
     _globalPCList.addPC(this);
 
     // Nothing starts until ICE gathering completes.
     this._queueOrRun({
@@ -631,16 +646,40 @@ RTCPeerConnection.prototype = {
     this._queueOrRun({
       func: this._getPC().setLocalDescription,
       args: [type, desc.sdp],
       wait: true,
       type: desc.type
     });
   },
 
+  setIdentityProvider: function(provider, protocol, username) {
+    if(this.signalingState == "closed") {
+      this.reportError('setIdentityProvider failed. signalingState is closed.', null, 0);
+    }
+    else {
+      this._idp.init(provider, protocol, username); //initialize the idp
+    }
+  },
+
+  getIdentityAssertion: function() {
+    let gotAssertion = function (assertion) {
+      this._peerIdentity.name = assertion;
+      this._observer.notifyIdentityResult();
+    }.bind(this);
+
+    if(this.signalingState == "closed") {
+      this.reportError('getIdentityAssertion failed. signalingState is closed.', null, 0);
+    }
+    else {
+      let fingerprint = this.fingerprint; //get fingerprint()
+      this._idp.requestIdentityAssertion(fingerprint, gotAssertion);
+    }
+  },
+
   setRemoteDescription: function(desc, onSuccess, onError) {
     // TODO -- if we have two setRemoteDescriptions in the
     // queue, this code overwrites the callbacks for the first
     // one with the callbacks for the second one. See Bug 831759.
     this._onSetRemoteDescriptionSuccess = onSuccess;
     this._onSetRemoteDescriptionFailure = onError;
 
     let type;
@@ -654,16 +693,48 @@ RTCPeerConnection.prototype = {
       case "pranswer":
         throw new Components.Exception("pranswer not yet implemented",
                                        Cr.NS_ERROR_NOT_IMPLEMENTED);
       default:
         throw new Components.Exception("Invalid type " + desc.type +
                                        " provided to setRemoteDescription");
     }
 
+    let verifyCallback = function(identity) {
+      let message, icon, priority;
+      let browser = this._win.QueryInterface(Ci.nsIInterfaceRequestor)
+                       .getInterface(Ci.nsIWebNavigation)
+                       .QueryInterface(Ci.nsIDocShell).chromeEventHandler;
+      let gBrowser = browser.ownerDocument.defaultView.gBrowser;
+      let notificationBox = gBrowser.getNotificationBox();
+
+      if(!identity) {
+        message = "WARNING: We could not verify the identity of the other party.";
+        icon = "chrome://global/skin/icons/warning-16.png";
+        priority = notificationBox.PRIORITY_WARNING_HIGH;
+      }
+      else  {
+        message = "You are now talking securely to " + identity;
+        icon = "chrome://browser/skin/Secure-Glyph.png";
+        priority = notificationBox.PRIORITY_WARNING_MEDIUM;
+      }
+
+      let buttons = [
+      // {
+      //   label: "Okay",
+      //   accessKey: "Y",
+      //   popup: "test",
+      //   callback: null
+      // }
+      ];
+
+      notificationBox.appendNotification(message, "webrtc-auth", icon, priority, buttons);
+    }.bind(this);
+    this._idp.verifySDP(desc.sdp, verifyCallback);
+
     this._queueOrRun({
       func: this._getPC().setRemoteDescription,
       args: [type, desc.sdp],
       wait: true,
       type: desc.type
     });
   },
 
@@ -734,26 +805,36 @@ RTCPeerConnection.prototype = {
     this.deprecated("localStreams");
     return this.getLocalStreams();
   },
   get remoteStreams() {
     this.deprecated("remoteStreams");
     return this.getRemoteStreams();
   },
 
+  get peerIdentity() {
+    return this._peerIdentity;
+  },
+
   get localDescription() {
     this._checkClosed();
     let sdp = this._getPC().localDescription;
     if (sdp.length == 0) {
       return null;
     }
     return new this._win.mozRTCSessionDescription({ type: this._localType,
                                                     sdp: sdp });
   },
 
+  get fingerprint() {
+    if(!this._fingerprint)
+      this._fingerprint = this._getPC().fingerprint; // TODO: Fix this. It should always work.
+    return this._fingerprint || "DE:AD:BE:EF";
+  },
+
   get remoteDescription() {
     this._checkClosed();
     let sdp = this._getPC().remoteDescription;
     if (sdp.length == 0) {
       return null;
     }
     return new this._win.mozRTCSessionDescription({ type: this._remoteType,
                                                     sdp: sdp });
@@ -926,31 +1007,39 @@ PeerConnectionObserver.prototype = {
         // want this to take down peerconnection, but we still want the user
         // to see it, so we catch it, report it, and move on.
         this._dompc.reportError(e.message, e.fileName, e.lineNumber);
       }
     }
   },
 
   onCreateOfferSuccess: function(sdp) {
-    this.callCB(this._dompc._onCreateOfferSuccess,
+    // getIdentityAssertion here and pass in the sdp
+    let onAssertionCB = function(sdp) {
+      this.callCB(this._dompc._onCreateOfferSuccess,
                 new this._dompc._win.mozRTCSessionDescription({ type: "offer",
                                                                 sdp: sdp }));
+    }.bind(this);
+    this._dompc._idp.signSDPWithAssertion(sdp, onAssertionCB);
     this._dompc._executeNext();
   },
 
   onCreateOfferError: function(code, message) {
     this.callCB(this._dompc._onCreateOfferFailure, new RTCError(code, message));
     this._dompc._executeNext();
   },
 
   onCreateAnswerSuccess: function(sdp) {
-    this.callCB (this._dompc._onCreateAnswerSuccess,
+    //attach the sdp assertion to asnswer as well
+    let onAssertionCB = function(sdp) {
+      this.callCB (this._dompc._onCreateAnswerSuccess,
                  new this._dompc._win.mozRTCSessionDescription({ type: "answer",
                                                                  sdp: sdp }));
+    }.bind(this);
+    this._dompc._idp.signSDPWithAssertion(sdp, onAssertionCB);
     this._dompc._executeNext();
   },
 
   onCreateAnswerError: function(code, message) {
     this.callCB(this._dompc._onCreateAnswerFailure, new RTCError(code, message));
     this._dompc._executeNext();
   },
 
@@ -1050,16 +1139,20 @@ PeerConnectionObserver.prototype = {
       case Ci.IPeerConnectionObserver.kSdpState:
         // No-op
         break;
 
       case Ci.IPeerConnectionObserver.kSipccState:
         // No-op
         break;
 
+      case 1:
+        //TODO REMOVE AFTER TESTING
+        break;
+
       default:
         this._dompc.reportWarning("Unhandled state type: " + state, null, 0);
         break;
     }
   },
 
   onAddStream: function(stream) {
     this.dispatchEvent(new this._dompc._win.MediaStreamEvent("addstream",
@@ -1082,15 +1175,237 @@ PeerConnectionObserver.prototype = {
   },
 
   notifyConnection: function() {
     this.dispatchEvent(new this._dompc._win.Event("connection"));
   },
 
   notifyClosedConnection: function() {
     this.dispatchEvent(new this._dompc._win.Event("closedconnection"));
+  },
+
+  notifyIdentityResult: function() {f
+    this.dispatchEvent(new this._dompc._win.Event('identityresult'));
+  }
+};
+
+function PeerConnectionIDP(pc) {
+  this._dompc = pc; // peer connection object
+  this.provider = null; // user specified idp domain (gmail.com/login.persona.org/yahoo.com)
+  this.protocol = null; // protocol to use ("default")
+  this.username = null; // unique identity string for that IDP
+  this.set = false; // true if the IDP has been initialized previously
+  this.idpChannel = null;
+  this.messages = {};
+  this.messageCount = 0;
+  this.ready = false;
+
+  this.init();
+};
+PeerConnectionIDP.prototype = {
+  log: function(message) {
+    if(typeof(message) == "string") {
+      try {
+        if(Services.prefs.getBoolPref("toolkit.identity.debug")) {
+          dump("PeerConnectionIDP: " + message);
+        }
+      }
+      catch(err) {
+        // do nothing
+      }
+    }
+  },
+
+  init: function(provider, protocol, username) {
+    // set the required values
+    this.set = true;
+    this.provider = provider || null;
+    this.protocol = protocol || null;
+    this.username = username || null;
+    this._dompc._peerIdentity.idp = this.provider;
+    this.idpChannel = !this.provider ? null : new IDPChannel(this.onMessage.bind(this), { provider: this.provider, protocol: this.protocol, username: this.username });
+  },
+
+  onMessage: function(message) {
+    message = JSON.parse(message);
+    /*
+      RETURNED FROM SIGN MESSAGE:
+      {
+        "type":"SUCCESS",
+        "id":1,
+        "message": {
+          "idp":{
+            "domain": "example.org"
+            "protocol": "bogus"
+          },
+          "assertion":\"{\"identity\":\"bob@example.org\",
+                         \"contents\":\"abcdefghijklmnopqrstuvwyz\",
+                         \"request_origin\":\"rtcweb://peerconnection\",
+                         \"signature\":\"010203040506\"}"
+        }
+      }
+
+      RETURNED FROM VERIFY MESSAGE:
+      {
+        "type":"SUCCESS",
+        "id":2,
+        "message": {
+          "identity" : {
+            "name" : "bob@example.org",
+            "displayname" : "Bob"
+          },
+          "request_origin":"rtcweb://peerconnection",
+          "contents":"abcdefghijklmnopqrstuvwyz" //fingerprint
+        }
+      }
+    */
+    this.log("Received message: " + JSON.stringify(message));
+
+    // let message = JSON.parse(message);
+    if(!message) return;
+    let msg = message.message || {};
+    let identity = msg.identity || {};
+    let stored = this.messages[message.id] || { callback: function(){} }; // lookup stored message
+    if(message.type == 'SUCCESS') {
+      if(stored.type == 'SIGN') {
+        return stored.callback(msg.assertion); // callback with assertion
+      }
+      else if(stored.type == 'VERIFY') {
+        if(msg.request_origin == "rtcweb://peerconnection") { // very important check!
+          let stored_fingerprint = stored.message.fingerprint;
+          if(stored_fingerprint && msg.contents == stored_fingerprint) { // most important check
+            return stored.callback(identity.name); // no error: callback with identity
+          }
+        }
+      }
+    }
+    else if(message.type == "ERROR"){
+      this.log("ERROR: " + message.error);
+    }
+    else if(message.type == "READY") {
+      this.ready = true;
+    }
+    return stored.callback(null);
+  },
+
+  /**
+   * Extracts and returns a fingerprint from SDP
+   * @param  {String} sdp a given SDP from PC offer/answer
+   * @return {String}     fingerprint from the SDP (or null)
+  */
+  getFingerprintFromSDP: function(sdp) {
+    if(!sdp) return null;
+    let pattern = /\na=fingerprint:\s*(\S+\s*\S*)/i; //TODO: test the shit outta this
+    let fingerprint_matches = sdp.match(pattern);
+    if(!fingerprint_matches) return null;
+    return fingerprint_matches[1];
+  },
+
+  /**
+   * Extracts and returns an identity assertion from SDP
+   * @param  {String} sdp a given SDP from PC offer/answer
+   * @return {String}     a identity assertion from SDP (or null)
+   */
+  getIdentityFromSDP: function(sdp) {
+    let id_patt = /\na=identity:\s*(\S+\s*\S*)/i; // TODO: test the shit outta this too
+    let assertion_matches = sdp.match(id_patt);
+    if(!assertion_matches) return null; //no matches (old browser?)
+    return assertion_matches[1]; // a match!
+  },
+
+  /**
+   * Signs a given SDP with an assertion from IDP
+   * @param  {String}     sdp       the SDP of the offer/answer
+   * @param  {Function}   callback  callback returning modified SDP with assertion
+   * @return {undefined}            undefined
+   */
+  signSDPWithAssertion: function(sdp, callback) {
+    let fingerprint = this.getFingerprintFromSDP(sdp);
+
+    this.requestIdentityAssertion(fingerprint, function(assertion) {
+      sdp += "a=identity: " + assertion;
+      callback(sdp);
+    });
+  },
+
+  /**
+   * Requests an assertion from the IDP Channel
+   * @param  {String}   fingerprint fingerprint associated with Peer Connection
+   * @param  {Function} callback    callback returning the assertion or null
+   * @return {undefined}            undefined
+   */
+  requestIdentityAssertion: function(fingerprint, callback) {
+    if(!this.ready) {
+      return callback(null);
+    }
+
+    let browser = this._dompc._win.QueryInterface(Ci.nsIInterfaceRequestor)
+                       .getInterface(Ci.nsIWebNavigation)
+                       .QueryInterface(Ci.nsIDocShell).chromeEventHandler;
+    let origin = browser.ownerDocument.defaultView.gBrowser.contentWindow.location.origin;
+
+    let message_id = ++this.messageCount;
+
+    let data = JSON.stringify({
+      type: 'SIGN',
+      id: message_id,
+      origin: origin,
+      message: fingerprint
+    });
+
+    this.messages[message_id] = {
+      type: 'SIGN',
+      message: fingerprint,
+      callback: callback
+    };
+
+    this.log('Sending to idpChannel: ' + data);
+
+    //send fingerprint to idp channel to create assertion
+    this.idpChannel.send(data);
+  },
+
+  verifyIdentityAssertion: function(assertion, fingerprint, callback) {
+    if(!this.ready) {
+      return callback(null);
+    }
+
+    let message = {
+      identity: assertion,
+      fingerprint: fingerprint
+    };
+
+    let message_id = ++this.messageCount;
+
+    let data = JSON.stringify({
+      type: 'VERIFY',
+      id: message_id,
+      message: assertion
+    });
+
+    this.messages[message_id] = {
+      type: 'VERIFY',
+      message: message,
+      callback: callback
+    };
+
+    this.log('Sending to idpChannel: ' + data);
+
+    this.idpChannel.send(data);
+  },
+
+  verifySDP: function(sdp, callback) {
+    if(!sdp) return callback(null);
+
+    let fingerprint = this.getFingerprintFromSDP(sdp);
+    if(!fingerprint) return callback(null);
+
+    let assertion = this.getIdentityFromSDP(sdp);
+    if(!assertion) return callback(null);
+
+    this.verifyIdentityAssertion(assertion, fingerprint, callback);
   }
 };
 
 this.NSGetFactory = XPCOMUtils.generateNSGetFactory(
   [GlobalPCList, RTCIceCandidate, RTCSessionDescription, RTCPeerConnection,
    RTCPeerConnectionIceEvent, MediaStreamEvent, RTCDataChannelEvent]
 );
diff --git a/dom/media/PeerConnection.manifest b/dom/media/PeerConnection.manifest
--- a/dom/media/PeerConnection.manifest
+++ b/dom/media/PeerConnection.manifest
@@ -1,15 +1,17 @@
 component {9878b414-afaa-4176-a887-1e02b3b047c2} PeerConnection.js
 component {02b9970c-433d-4cc2-923d-f7028ac66073} PeerConnection.js
 component {1775081b-b62d-4954-8ffe-a067bbf508a7} PeerConnection.js
 component {7293e901-2be3-4c02-b4bd-cbef6fc24f78} PeerConnection.js
 component {b9cd25a7-9859-4f9e-8f84-ef5181ff36c0} PeerConnection.js
 component {a722a8a9-2290-4e99-a5ed-07b504292d08} PeerConnection.js
 component {d5ed7fbf-01a8-4b18-af6c-861cf2aac920} PeerConnection.js
+component {498df9b5-87dd-40e5-b717-9cab40b1f99b} PeerConnection.js
 
 contract @mozilla.org/dom/peerconnection;1 {9878b414-afaa-4176-a887-1e02b3b047c2}
 contract @mozilla.org/dom/rtcicecandidate;1 {02b9970c-433d-4cc2-923d-f7028ac66073}
 contract @mozilla.org/dom/rtcsessiondescription;1 {1775081b-b62d-4954-8ffe-a067bbf508a7}
+contract @mozilla.org/dom/rtcidentityassertion;1 {498df9b5-87dd-40e5-b717-9cab40b1f99b}
 contract @mozilla.org/dom/peerconnectionmanager;1 {7293e901-2be3-4c02-b4bd-cbef6fc24f78}
 contract @mozilla.org/dom/rtcpeerconnectioniceevent;1 {b9cd25a7-9859-4f9e-8f84-ef5181ff36c0}
 contract @mozilla.org/dom/mediastreamevent;1 {a722a8a9-2290-4e99-a5ed-07b504292d08}
 contract @mozilla.org/dom/datachannelevent;1 {d5ed7fbf-01a8-4b18-af6c-861cf2aac920}
diff --git a/dom/webidl/RTCIdentityAssertion.webidl b/dom/webidl/RTCIdentityAssertion.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/RTCIdentityAssertion.webidl
@@ -0,0 +1,12 @@
+dictionary RTCIdentityAssertionInit {
+  DOMString? idp = null;
+  DOMString? name = null;
+};
+
+[Pref="media.peerconnection.enabled",
+ JSImplementation="@mozilla.org/dom/rtcidentityassertion;1",
+ Constructor(optional RTCIdentityAssertionInit assertionInitDict)]
+interface RTCIdentityAssertion {
+  attribute DOMString? idp;
+  attribute DOMString? name;
+};
diff --git a/dom/webidl/RTCPeerConnection.webidl b/dom/webidl/RTCPeerConnection.webidl
--- a/dom/webidl/RTCPeerConnection.webidl
+++ b/dom/webidl/RTCPeerConnection.webidl
@@ -4,16 +4,17 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/.
  *
  * The origin of this IDL file is
  * http://dev.w3.org/2011/webrtc/editor/webrtc.html#idl-def-RTCPeerConnection
  */
 
 callback RTCSessionDescriptionCallback = void (mozRTCSessionDescription sdp);
 callback RTCPeerConnectionErrorCallback = void (DOMString errorInformation);
+callback RTCIdentityResultCallback = void (RTCIdentityAssertion result);
 callback VoidFunction = void ();
 
 enum RTCSignalingState {
     "stable",
     "have-local-offer",
     "have-remote-offer",
     "have-local-pranswer",
     "have-remote-pranswer",
@@ -63,41 +64,49 @@ interface mozRTCPeerConnection : EventTa
                     RTCPeerConnectionErrorCallback? failureCallback, // for apprtc
                     optional object? constraints);
   void createAnswer (RTCSessionDescriptionCallback successCallback,
                      RTCPeerConnectionErrorCallback? failureCallback, // for apprtc
                      optional object? constraints);
   void setLocalDescription (mozRTCSessionDescription description,
                             optional VoidFunction successCallback,
                             optional RTCPeerConnectionErrorCallback failureCallback);
+  void setIdentityProvider (DOMString provider,
+                            optional DOMString protocol,
+                            optional DOMString username);
+  void getIdentityAssertion ();
   void setRemoteDescription (mozRTCSessionDescription description,
                              optional VoidFunction successCallback,
                              optional RTCPeerConnectionErrorCallback failureCallback);
   readonly attribute mozRTCSessionDescription? localDescription;
   readonly attribute mozRTCSessionDescription? remoteDescription;
   readonly attribute RTCSignalingState signalingState;
+
   void updateIce (optional RTCConfiguration configuration,
                   optional object? constraints);
   void addIceCandidate (mozRTCIceCandidate candidate,
                         optional VoidFunction successCallback,
                         optional RTCPeerConnectionErrorCallback failureCallback);
   readonly attribute RTCIceGatheringState iceGatheringState;
   readonly attribute RTCIceConnectionState iceConnectionState;
+
   sequence<MediaStream> getLocalStreams ();
   sequence<MediaStream> getRemoteStreams ();
   MediaStream? getStreamById (DOMString streamId);
   void addStream (MediaStream stream, optional object? constraints);
   void removeStream (MediaStream stream);
   void close ();
   attribute EventHandler onnegotiationneeded;
   attribute EventHandler onicecandidate;
   attribute EventHandler onsignalingstatechange;
   attribute EventHandler onaddstream;
   attribute EventHandler onremovestream;
   attribute EventHandler oniceconnectionstatechange;
+
+  readonly attribute RTCIdentityAssertion peerIdentity;
 };
 
 // Mozilla extensions.
 partial interface mozRTCPeerConnection {
   // Deprecated callbacks (use causes warning)
   attribute RTCPeerConnectionErrorCallback onicechange;
   attribute RTCPeerConnectionErrorCallback ongatheringchange;
 
@@ -107,9 +116,11 @@ partial interface mozRTCPeerConnection {
   readonly attribute DOMString readyState;
 
   // Data channel.
   RTCDataChannel createDataChannel (DOMString label,
                                     optional RTCDataChannelInit dataChannelDict);
   attribute EventHandler ondatachannel;
   attribute EventHandler onconnection;
   attribute EventHandler onclosedconnection;
+
+  attribute EventHandler onidentityresult;
 };
diff --git a/dom/webidl/WebIDL.mk b/dom/webidl/WebIDL.mk
--- a/dom/webidl/WebIDL.mk
+++ b/dom/webidl/WebIDL.mk
@@ -232,16 +232,17 @@ webidl_files = \
   Promise.webidl \
   PushManager.webidl \
   Range.webidl \
   Rect.webidl \
   RGBColor.webidl \
   RTCConfiguration.webidl \
   RTCDataChannelEvent.webidl \
   RTCIceCandidate.webidl \
+  RTCIdentityAssertion.webidl \
   RTCPeerConnection.webidl \
   RTCPeerConnectionIceEvent.webidl \
   RTCSessionDescription.webidl \
   Screen.webidl \
   ScriptProcessorNode.webidl \
   ScrollAreaEvent.webidl \
   SettingsManager.webidl \
   SimpleGestureEvent.webidl \
