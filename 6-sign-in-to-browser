# HG changeset patch
# Parent 11cae0044cd0af33f5385dbfb1f65d96d0353750
try: -b do -p all -u all -t none

diff --git a/browser/base/content/browser-id-signIn.html b/browser/base/content/browser-id-signIn.html
new file mode 100644
--- /dev/null
+++ b/browser/base/content/browser-id-signIn.html
@@ -0,0 +1,152 @@
+<html>
+  <head>
+    <title>Sign In</title>
+    <link href="https://firefoxos.persona.org/production/en/browserid.css" rel="stylesheet" type="text/css"/>
+    <style type="text/css">
+      .hidden {display: none;}
+    </style>
+  </head>
+  <body>
+
+    <!-- create a persona account or sign in with an existing one -->
+    <div id='wrapper'>
+      <div id="hAlign" class="display_always" style="display: block;">
+        <div id='vAlign' style='height: 343px;'>
+
+            <form id="signUpForm" class="cf authform">
+             <div id='sign-in-box'>
+             <h1 id="title">Sign In To Your Browser</h1>
+             <ul>
+               <li>
+                 <label>To sign in with Persona, please enter your email address.</label>
+                 <input type='text' id='email'/>
+               </li>
+  
+               <li id='password-entry' class='hidden'>
+                 <label id='password-old' class='hidden'>Password</label>
+                 <label id='password-new' class='hidden'>
+                   Your email address is new to us. 
+                   Please create a password to use with Persona.
+                 </label>
+                 <input type='password' id='password' autocomplete='off'/>
+               </li>   
+              </ul>
+
+              <div class='submit cf forminputs start'>
+                <button id='next'>Next</button>
+              </div>
+              <div class='submit cf forminputs'>
+                <button id='signIn' class='hidden'>Sign In</button>
+                <button id='create' class='hidden'>Create Account</button>
+              </div>
+              </div>
+
+              <div id='signed-in-box' class='hidden'>
+                <h1>Great Success!</h1> 
+                <p>You are signed in to your browser with Persona.</p>
+                <p>You may close this tab now.</p>
+              </div>
+            </form>
+
+       </div>
+      </div>
+    </div>
+
+
+    <script type="text/javascript;version=1.8">
+      // XXX make lazy
+      Components.utils.import('resource://gre/modules/identity/IdentityService.jsm');
+
+      let origin = 'https://firefox.com';
+      let email_input = document.getElementById('email');
+      let password_input = document.getElementById('password');
+      let next_button = document.getElementById('next');
+      let signin_button = document.getElementById('signIn');
+      let create_button = document.getElementById('create');
+
+      /**
+       * User enters email and clicks Next.  Check for existing account.
+       * If there is one, move on to 'signin'.  Otherwise move on to 
+       * 'create'.
+       */
+      next_button.addEventListener('click', function(evt) {
+        evt.preventDefault();
+        let email = email_input.value;
+        //disable('email');
+        hide('next');
+
+        IdentityService.accountExists({email:email}, function(info) {
+          console.log(info);
+          show('password-entry');
+          if (info.state === 'unknown') {
+            hide('password-old');
+            show('password-new');
+            show('create');
+          } else {
+            hide('password-new');
+            show('password-old');
+            show('signIn');
+          }
+        });
+      });
+
+      /**
+       * User with an existing account enters password and clicks Sign In.
+       * Move on to yay.
+       */
+      signin_button.addEventListener('click', function(evt) {
+        evt.preventDefault();
+        IdentityService.signIn({
+          email: email_input.value,
+          password: password_input.value,
+          origin: origin,
+          allowUnverified: true}, 
+          yay
+        );
+      });
+
+      /**
+       * User enters a password and clicks Create Account.
+       * Move on to yay.
+       */
+      create_button.addEventListener('click', function(evt) {
+        evt.preventDefault();
+        IdentityService.createAccount({
+          email: email_input.value,
+          password: password_input.value,
+          origin: origin,
+          allowUnverified: true}, 
+          yay
+        );
+      });
+
+      /**
+       * Completing either 'signin' or 'create', we check to see if a 
+       * valid assertion was returned.  If so, Great success!  If not,
+       * start again and get an email.
+       */
+      function yay(assertion) {
+        if (assertion) {
+          show('signed-in-box');
+          hide('sign-in-box');
+          console.log("got assertion - hid forms");
+        } else {
+          hide('signed-in-box');
+          show('sign-in-box');
+          hide('password-entry');
+          show('email');
+          show('next');
+        }
+      }
+
+      function show(id) {
+        document.getElementById(id).classList.remove('hidden');
+      }
+
+      function hide(id) {
+        document.getElementById(id).classList.add('hidden');
+      }
+
+    </script>
+  </body>
+</html>
diff --git a/browser/base/content/identity-framescript.js b/browser/base/content/identity-framescript.js
--- a/browser/base/content/identity-framescript.js
+++ b/browser/base/content/identity-framescript.js
@@ -21,45 +21,75 @@ function IdentityShim() {
   this.isLoaded = false;
 }
 
 IdentityShim.prototype = {
   init: function IdentityShim_init() {
     addMessageListener('identity-delegate-watch', this);
     addMessageListener('identity-delegate-request', this);
     addMessageListener('identity-delegate-logout', this);
+
+    addMessageListener('identity-delegate-getIdentity', this);
+    addMessageListener('identity-delegate-signIn', this);
+    addMessageListener('identity-delegate-signOut', this);
+    addMessageListener('identity-delegate-accountExists', this);
+
     sendAsyncMessage('identity-delegate-loaded');
     logger.log('sent identity-delegate-loaded');
     this.isLoaded = true;
   },
 
   uninit: function IdentityShim_uninit() {
     if (this.isLoaded) {
       removeMessageListener('identity-delegate-watch', this);
       removeMessageListener('identity-delegate-request', this);
       removeMessageListener('identity-delegate-logout', this);
+
+      removeMessageListener('identity-delegate-getIdentity', this);
+      removeMessageListener('identity-delegate-signIn', this);
+      removeMessageListener('identity-delegate-signOut', this);
+      removeMessageListener('identity-delegate-accountExists', this);
+
       sendAsyncMessage('identity-delegate-complete', null);
       logger.log('sent identity-delegate-complete');
       this.isLoaded = false;
     }
   },
 
   receiveMessage: function IdentityShim_receiveMessage(aMessage) {
+    let options = aMessage.json;
     switch (aMessage.name) {
       case 'identity-delegate-watch':
-        this.watch(aMessage.json);
+        this.watch(options);
         break;
       case 'identity-delegate-request':
-        this.request(aMessage.json);
+        this.request(options);
         break;
       case 'identity-delegate-logout':
-        this.logout(aMessage.json);
+        this.logout(options);
         break;
+
+      case 'identity-delegate-getIdentity':
+        this.getIdentity(options);
+        break;
+      case 'identity-delegate-signIn':
+        this.signIn(options);
+        break;
+      case 'identity-delegate-signOut':
+        this.signOut(options);
+        break;
+      case 'identity-delegate-accountExists':
+        this.accountExists(options);
+        break;
+      case 'identity-delegate-createAccount':
+        this.createAccount(options);
+        break;
+
       default:
-        //logger.error("received unexpected message:", aMessage.name);
+        logger.error("received unexpected message:", aMessage.name);
         break;
     }
   },
 
   _identityDoMethod: function IdentityShim__identityDoMethod(message) {
     sendAsyncMessage('identity-service-doMethod', message);
   },
 
@@ -116,19 +146,127 @@ IdentityShim.prototype = {
       let BrowserID = content.wrappedJSObject.BrowserID;
       let callback = function() {
         this._identityDoMethod({method: 'logout', _internal: options._internal});
         this._close();
       }.bind(this);
 
       BrowserID.internal.logout(options.origin, callback);
     }
+  },
+
+  /*
+   * Get identity for browser
+   */
+  getIdentity: function IdentityShim_getIdentity(options) {
+    let stringifiedOptions = JSON.stringify(options);
+    let callback = function shim_getIdentityCallback(err, assertion, internalParams) {
+      logger.log("got identity:", assertion);
+      internalParams = internalParams || {};
+      this._identityDoMethod({
+        method: 'getIdentity',
+        assertion: assertion,
+        _internal: options._internal,
+        _internalParams: internalParams});
+      this._close();
+    }.bind(this);
+
+    content.wrappedJSObject.BrowserID.internal.getIdentity(
+      options.origin,
+      callback,
+      stringifiedOptions
+    );
+    logger.log("called internal getIdentity");
+  },
+
+  /*
+   * Sign in to browser
+   */
+  signIn: function IdentityShim_signIn(options) {
+    logger.log("signin with options", options);
+    let stringifiedOptions = JSON.stringify(options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+
+    let callback = function shim_signInCallback(err, assertion, internalParams) {
+      internalParams = internalParams || {};
+      logger.log("got err, assertion", err, assertion);
+      this._identityDoMethod({
+        method: 'signIn',
+        assertion: assertion,
+        error: err,
+        _internal: options._internal,
+        _internalParams: internalParams});
+    }.bind(this);
+
+    logger.log("calling signIn:", stringifiedOptions);
+    BrowserID.internal.signIn(stringifiedOptions, callback);
+  },
+
+  /*
+   * Sign out of browser
+   */
+
+  signOut: function IdentityShim_signOut(options) {
+    logger.log("signout with options", options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+    let stringifiedOptions = JSON.stringify(options);
+
+    let callback = function shim_signOutCallback() {
+      this._identityDoMethod({method: 'signOut', _internal: options._internal});
+      this._close();
+    }.bind(this);
+
+    BrowserID.internal.signOut(stringifiedOptions, callback);
+  },
+
+  /*
+   * Test whether an account exists
+   */
+  accountExists: function IdentityShim_accountExists(options) {
+    logger.log("check account exists", options);
+    let stringifiedOptions = JSON.stringify(options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+
+    let callback = function shim_accountExistsCallback(err, exists) {
+      exists = parseResult(exists);
+      this._identityDoMethod({
+        id: options.id,
+        error: err,
+        method: 'accountExists',
+        exists: exists});
+    }.bind(this);
+
+    BrowserID.internal.accountExists(stringifiedOptions, callback);
+  },
+
+  /*
+   * Create user from browser
+   */
+  createAccount: function IdentityShim_createAccount(options) {
+    logger.log("create user with options", options);
+    let stringifiedOptions = JSON.stringify(options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+
+    let callback = function shim_createAccountCallback(err, assertion, internalParams) {
+      logger.log("got assertion", assertion);
+      this._identityDoMethod({
+        id: options.id,
+        error: err,
+        method: 'createAccount',
+        assertion: assertion,
+        email: options.email,
+        origin: options.origin,
+        _internal: options._internal,
+        _internalParams: internalParams});
+    }.bind(this);
+
+    BrowserID.internal.createAccount(stringifiedOptions, callback);
   }
 };
-
+ 
 this.shim = null;
 
 // XXX wha?  why both events
 // dump out these events - should just be on 'load'
 addEventListener('DOMContentLoaded', function(e) {
   content.addEventListener('load', function(e) {
     logger.log('content loaded');
     this.shim = new IdentityShim();
diff --git a/browser/modules/SignInToWebsite.jsm b/browser/modules/SignInToWebsite.jsm
--- a/browser/modules/SignInToWebsite.jsm
+++ b/browser/modules/SignInToWebsite.jsm
@@ -111,17 +111,26 @@ ResizeWatcher.prototype = {
   }
 };
 
 /**
  * Return the chrome window and <browser> for the given outer window ID.
  */
 function getUIForWindowID(aWindowID) {
   // XXX b2g and desktop have different kinds of window ids
-  let outerWindowID = aWindowID.split("-")[0];
+  logger.log("calling with aWindowID=", aWindowID);
+  let outerWindowID;
+  // XXX super atrocious hack for the moment
+  if (typeof aWindowID === 'number') {
+    // it's just a window id
+    outerWindowID = aWindowID;
+  } else {
+    // it's id-uuid
+    outerWindowID = parseInt(aWindowID.split("-")[0], 10);
+  }
   let content = Services.wm.getOuterWindowWithId(outerWindowID);
 
   if (content) {
     let browser = content.QueryInterface(Ci.nsIInterfaceRequestor)
                          .getInterface(Ci.nsIWebNavigation)
                          .QueryInterface(Ci.nsIDocShell).chromeEventHandler;
     let chromeWin = browser.ownerDocument.defaultView;
 
@@ -257,27 +266,30 @@ Pipe.prototype = {
     Services.obs.notifyObservers(subject, 'identity-delegate-ui-close', null);
 
     if (typeof this.options.onComplete === 'function') {
       this.options.onComplete();
     }
   },
 
   _delegateLoaded: function pipe__delegateLoaded() {
+    logger.log("controller heard delegate loaded; sending", this.options.message);
     this.mm.sendAsyncMessage(this.options.message, this.options.rpOptions);
     // XXX maybe here ??
     //this.resizer = new ResizeWatcher(); etc.
   },
 
   _delegateComplete: function pipe__delegateComplete() {
+    logger.log("controller heard delegate complete");
     this._close();
   },
 
   _serviceDoMethod: function pipe__doMethod(aMethodOptions) {
     let message = aMethodOptions.json;
+    logger.log("controller heard service do method:", message);
     if (typeof message === 'string') {
       try {
         message = JSON.parse(message);
       } catch (err) {
         logger.error('Bad json message: ' + message);
         return;
       }
     }
@@ -306,27 +318,40 @@ Pipe.prototype = {
 this.SignInToWebsiteUX = {
   init: function SignInToWebsiteUX_init(pipeConstructor) {
     this.PipeConstructor = pipeConstructor || Pipe;
     this.contexts = {};
     Services.obs.addObserver(this, 'identity-controller-watch', false);
     Services.obs.addObserver(this, 'identity-controller-request', false);
     Services.obs.addObserver(this, 'identity-controller-logout', false);
     Services.obs.addObserver(this, 'identity-controller-canceled', false);
+
+    Services.obs.addObserver(this, 'identity-controller-getIdentity', false);
+    Services.obs.addObserver(this, 'identity-controller-signIn', false);
+    Services.obs.addObserver(this, 'identity-controller-signOut', false);
+    Services.obs.addObserver(this, 'identity-controller-accountExists', false);
+    Services.obs.addObserver(this, 'identity-controller-createAccount', false);
   },
 
   uninit: function SignInToWebsiteUX_uninit() {
     Services.obs.removeObserver(this, 'identity-controller-watch');
     Services.obs.removeObserver(this, 'identity-controller-request');
     Services.obs.removeObserver(this, 'identity-controller-logout');
     Services.obs.removeObserver(this, 'identity-controller-canceled');
+
+    Services.obs.removeObserver(this, 'identity-controller-getIdentity');
+    Services.obs.removeObserver(this, 'identity-controller-signIn');
+    Services.obs.removeObserver(this, 'identity-controller-signOut');
+    Services.obs.removeObserver(this, 'identity-controller-accountExists');
+    Services.obs.removeObserver(this, 'identity-controller-createAccount');
   },
 
   observe: function SignInToWebsiteUX_observe(aSubject, aTopic, aData) {
     logger.log('controller observed:', aTopic);
+    logger.log('message data:', aData);
     // XXX need to detect page unload of any of our flows
     // XXX we get strings from xul, and objects from elsewhere
     let rpOptions = {};
     if (aSubject) {
       if (aSubject.wrappedJSObject) {
         rpOptions = aSubject.wrappedJSObject;
       } else {
         rpOptions = {id: aSubject.QueryInterface(Ci.nsISupportsString).data};
@@ -353,16 +378,36 @@ this.SignInToWebsiteUX = {
       case 'identity-controller-request':
         this.doRequest(options);
         break;
 
       case 'identity-controller-logout':
         this.doLogout(options);
         break;
 
+      case 'identity-controller-getIdentity':
+        this.doGetIdentity(options);
+        break;
+
+      case 'identity-controller-signIn':
+        this.doSignIn(options);
+        break;
+
+      case 'identity-controller-signOut':
+        this.doSignOut(options);
+        break;
+
+      case 'identity-controller-accountExists':
+        this.doAccountExists(options);
+        break;
+
+      case 'identity-controller-createAccount':
+        this.doCreateAccount(options);
+        break;
+
       default:
         logger.error('SignInToWebsiteUX', 'Unknown observer notification:', aTopic);
         break;
      }
    },
  
   serviceDoMethod: function SignInToWebsiteUX_doMethod(aMessage, aId) {
     logger.log('serviceDoMethod received:', aMessage);
@@ -382,16 +427,36 @@ this.SignInToWebsiteUX = {
       case 'logout':
         IdentityService.doLogout(aId);
         break;
 
       case 'cancel':
         IdentityService.doCancel(aId);
         break;
 
+      case 'getIdentity':
+        IdentityService.doGetIdentity(aId, aMessage.assertion);
+        break;
+
+      case 'signIn':
+        IdentityService.doSignIn(aId, aMessage.assertion);
+        break;
+
+      case 'signOut':
+        IdentityService.doSignOut(aId);
+        break;
+
+      case 'accountExists':
+        IdentityService.doAccountExists(aId, aMessage.exists);
+        break;
+
+      case 'createAccount':
+        IdentityService.doCreateAccount(aId, aMessage.assertion);
+        break;
+
       default:
         logger.error('Unknown identity method: ' + aMessage.method);
         break;
     }
   },
  
   cleanUp: function SignInToWebsiteUX_cleanUp(aId) {
     let context = this.contexts[aId];
@@ -445,10 +510,47 @@ this.SignInToWebsiteUX = {
   },
 
   doLogout: function SignInToWebsiteUX_doLogout(aOptions) {
     aOptions.message = 'identity-delegate-logout';
     aOptions.src = kHiddenPersonaIframe;
     aOptions.showUI = false;
     logger.log("options:", aOptions);
     this.delegate(aOptions);
-  }
+  },
+
+  doGetIdentity: function SignInToWebsiteUX_doGetIdentity(aOptions) {
+    logger.log("delegating getIdentity:" , aOptions);
+    aOptions.message = 'identity-delegate-getIdentity';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doSignIn: function SignInToWebsiteUX_doSignIn(aOptions) {
+    logger.log("delegating signin:" , aOptions);
+    aOptions.message = 'identity-delegate-signIn';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doSignOut: function SignInToWebsiteUX_doSignOut(aOptions) {
+    aOptions.message = 'identity-delegate-signOut';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doAccountExists: function SignInToWebsiteUX_doSignOut(aOptions) {
+    aOptions.message = 'identity-delegate-accountExists';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doCreateAccount: function SignInToWebsiteUX_doCreateAccount(aOptions) {
+    aOptions.message = 'identity-delegate-createAccount';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
 };
diff --git a/dom/identity/tests/head_identity.js b/dom/identity/tests/head_identity.js
--- a/dom/identity/tests/head_identity.js
+++ b/dom/identity/tests/head_identity.js
@@ -38,16 +38,28 @@ function RequestListener() {
   Services.obs.addObserver(this, "http-on-modify-request", false);
   logger.log("Listening for http-on-modify-request");
 }
 
 RequestListener.prototype = {
   observe: function observe(aSubject, aTopic, aData) {
     if (aTopic === "http-on-modify-request") {
       logger.log("SpecialPowers.wrap(", aSubject, ").QueryInterface(Ci.nsIHttpChannel);");
+      // XXX [jedp] this blows up in the b2g test when pushing to try
+      // Error is:
+      //
+      // 15:51:04 INFO - 25778 ERROR TEST-UNEXPECTED-FAIL 
+      // | /tests/dom/identity/tests/test_rp.html 
+      // | uncaught exception - NS_ERROR_NOT_IMPLEMENTED: 
+      //   Component returned failure code: 0x80004001 (NS_ERROR_NOT_IMPLEMENTED) 
+      //   [nsIObserverService.addObserver] at chrome://specialpowers/content/specialpowersAPI.js:83
+      //
+      // XXX need to figure out if this is expected to behave differently on
+      // b2g, in which case the test needs to be rewritten or excluded from b2g
+      // builds.
       let channel = SpecialPowers.wrap(aSubject).QueryInterface(Ci.nsIHttpChannel);
       let ioservice = Cc["@mozilla.org/network/io-service;1"]
                         .getService(Ci.nsIIOService);
       let src = channel.URI.spec;
       let target = null;
       if (src.match(/include.js/)) target = MOCK_INCLUDEJS;
       if (src.match(/communication_iframe/)) target = MOCK_IFRAME;
       if (src.match(/sign_in/)) target = MOCK_DIALOG;
