# HG changeset patch
# Parent cab2830efeae17a3372e783b2b456037536fe8c1
# User Jed Parsons <jparsons@mozilla.com>
# Date Thu Aug  8 18:40:43 2013 -0700
Bug 878941 - IdP Proxy and communication channel for RTC peer connection (wip)

diff --git a/toolkit/identity/RTCIdentity.jsm b/toolkit/identity/RTCIdentity.jsm
new file mode 100644
--- /dev/null
+++ b/toolkit/identity/RTCIdentity.jsm
@@ -0,0 +1,119 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+//
+
+this.EXPORTED_SYMBOLS = ["IDPChannel"];
+
+const {classes: Cc, interfaces: Ci, utils: Cu} = Components;
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+// XXX protocol handler example
+// https://mxr.mozilla.org/mozilla-central/source/toolkit/components/thumbnails/PageThumbsProtocol.js
+
+XPCOMUtils.defineLazyModuleGetter(this, "Logger",
+                                  "resource://gre/modules/identity/LogUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "Sandbox",
+                                  "resource://gre/modules/identity/Sandbox.jsm");
+
+function log(...aMessageArgs) {
+  Logger.log.apply(Logger, ["RTC"].concat(aMessageArgs));
+}
+
+function reportError(...aMessageArgs) {
+  Logger.reportError.apply(Logger, ["RTC"].concat(aMessageArgs));
+}
+
+/*
+ * IDPChannel: A message channel between the RTC PeerConnection and a
+ * designated IdP Proxy.
+ *
+ * @param aMessageCallback  Callback to invoke to send messages back to
+ *        (function)        the caller.
+ *
+ * @param aOptions          Options from caller, as well as overrides to
+ *        (object)          make testing easier.
+ *
+ *                          PeerConnection.js may use any of the following
+ *                          options:
+ *
+ *                          provider:  identity provider (e.g., example.com)
+ *                          protocol:  identity protocol (e.g., browserid)
+ *                          identity:  user identity (e.g., alice@example.com)
+ */
+function IDPChannel(aMessageCallback, aOptions) {
+  aOptions = aOptions || {};
+  log(aOptions);
+
+  this.receiveResponse = aMessageCallback;
+
+  this.provider = aOptions.provider;
+  this.protocol = aOptions.protocol || "default";
+  this.well_known = this.provider + '/.well-known/idp-proxy/' + this.protocol;
+  this.contentWindow = null;
+
+  try {
+    Services.io.newURI(this.well_known, null, null).spec;
+    this.init();
+  }
+  catch(e) {
+    reportError("Bad URL");
+  }
+  // XXX Try to get an assertion immediately
+}
+
+IDPChannel.prototype = {
+  init: function idpChannel_init() {
+    // XXX origin for postMessage should be rtcweb://peerconnection
+    // Does this require using Cu.Sandbox instead?
+    new Sandbox(this.well_known, function(aSandbox) {
+      this.contentWindow = aSandbox._frame.contentWindow;
+
+      // when getting msg sent from sandbox
+      this.contentWindow.addEventListener('message', function(e) {
+        // log('target: '+ e.target);
+        // log("source: " + e.source);
+        // log('target origin: '+ e.target.location.origin);
+        // log("source origin: " + e.source.location.origin);
+        // log("origin: " + e.origin);
+        // log("msg: " + e.data);
+
+        //ensures message came from itself
+        if(e.source == this.contentWindow) {
+          this.receiveResponse(e.data);
+        }
+        else {
+          reportError("Message from incorrect origin");
+        }
+      }.bind(this), false, true);
+
+    }.bind(this));
+  },
+
+  send: function idpChannel_send(message) {
+    if (!this.contentWindow) {
+      return reportError("HostFrame or MessageChannel not open");
+    }
+
+    try {
+      // this is sending a message to the sandbox
+      log('Sending message to sandbox: ' + message);
+      var eve = new this.contentWindow.CustomEvent('rtcmessage', { detail : message });
+      this.contentWindow.dispatchEvent(eve);
+
+      // this.contentWindow.frames.wrappedJSObject.getMessage(message);
+      // this.contentWindow.postMessage(message, this.provider);
+    } catch (err) {
+      log('Failed to send message: ' + message);
+      reportError(err);
+    }
+  }
+};
+
+this.IDPChannel = IDPChannel;
diff --git a/toolkit/identity/moz.build b/toolkit/identity/moz.build
--- a/toolkit/identity/moz.build
+++ b/toolkit/identity/moz.build
@@ -22,12 +22,13 @@ JS_MODULES_PATH = 'modules/identity'
 
 EXTRA_JS_MODULES += [
     'Identity.jsm',
     'IdentityProvider.jsm',
     'IdentityStore.jsm',
     'IdentityUtils.jsm',
     'LogUtils.jsm',
     'MinimalIdentity.jsm',
+    'RTCIdentity.jsm',
     'RelyingParty.jsm',
     'Sandbox.jsm',
     'jwcrypto.jsm',
 ]
diff --git a/toolkit/identity/tests/unit/data/rtc_idp/.well-known/idp-proxy/bogus b/toolkit/identity/tests/unit/data/rtc_idp/.well-known/idp-proxy/bogus
new file mode 100644
--- /dev/null
+++ b/toolkit/identity/tests/unit/data/rtc_idp/.well-known/idp-proxy/bogus
@@ -0,0 +1,8 @@
+<!DOCTYPE html>
+ <head>
+  <script src="bogus.js"></script>
+ </head>
+ <body>
+ </body>
+</html>
+
diff --git a/toolkit/identity/tests/unit/data/rtc_idp/bogus.js b/toolkit/identity/tests/unit/data/rtc_idp/bogus.js
new file mode 100644
--- /dev/null
+++ b/toolkit/identity/tests/unit/data/rtc_idp/bogus.js
@@ -0,0 +1,20 @@
+onmessage = function(e) {
+  switch (e.type) {
+    case "SIGN":
+      postMessage({
+        type: "SUCCESS",
+        message: "Signed message"
+      }, "rtcweb://peerconnection");
+      break;
+    case "VERIFY":
+      postMessage({
+        type: "SUCCESS",
+        message: "Verified message"
+      }, "rtcweb://peerconnection");
+      break;
+    default:
+      break;
+  }
+};
+
+postMessage({type: "READY"}, "rtcweb://peerconnection");
diff --git a/toolkit/identity/tests/unit/test_load_modules.js b/toolkit/identity/tests/unit/test_load_modules.js
--- a/toolkit/identity/tests/unit/test_load_modules.js
+++ b/toolkit/identity/tests/unit/test_load_modules.js
@@ -3,16 +3,17 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const modules = [
   "Identity.jsm",
   "IdentityProvider.jsm",
   "IdentityStore.jsm",
   "jwcrypto.jsm",
   "RelyingParty.jsm",
+  "RTCIdentity.jsm",
   "Sandbox.jsm",
 ];
 
 function run_test() {
   for each (let m in modules) {
     let resource = "resource://gre/modules/identity/" + m;
     Components.utils.import(resource, {});
     do_print("loaded " + resource);
diff --git a/toolkit/identity/tests/unit/test_rtcauthmodule.js b/toolkit/identity/tests/unit/test_rtcauthmodule.js
new file mode 100644
--- /dev/null
+++ b/toolkit/identity/tests/unit/test_rtcauthmodule.js
@@ -0,0 +1,217 @@
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://testing-common/httpd.js");
+
+XPCOMUtils.defineLazyModuleGetter(this, "IDPChannel",
+  "resource://gre/modules/identity/RTCIdentity.jsm",
+  "IDPChannel");
+
+const IDP_PORT = 8081;
+const WELL_KNOWN_PATH = '/.well-known/idp-proxy/bogus';
+
+function test_import() {
+  do_check_eq(typeof IDPChannel, "function");
+  do_check_eq(typeof Pipe, "function");
+  do_check_eq(typeof HostFrame, "function");
+  run_next_test();
+}
+
+function test_ready() {
+  do_test_pending();
+
+  let onMessage = function onMessage(message) {
+    do_check_eq(message.type, "READY");
+    do_test_finished();
+    run_next_test();
+  }
+
+  let channel = new IDPChannel(onMessage);
+}
+
+function test_sign() {
+  do_test_pending();
+  usingIdpProxy(function(proxy) {
+    let sign_message = {
+      type: "SIGN",
+      id: 42,
+      origin: "https://calling-service.example.com/",
+      message: "abcdefghijklmnopqrstuvwyz"
+    };
+
+    let onMessage = function onMessage(message) {
+      switch(message.type) {
+        case "READY":
+          // wait until the next tick so channel will not be undefined
+          dump("is READY");
+          do_timeout(0, function sendSignMessage() {
+            dump("channel.send " + sign_message);
+            channel.send(sign_message);
+          });
+          break;
+        case "SUCCESS":
+          do_check_eq(message.id, sign_message.id);
+          do_test_finished();
+          proxy.server.stop(run_next_test);
+          break;
+        default:
+          log("wtf!?");
+          do_throw("Weird message type: " + message.type);
+          break;
+      }
+    };
+    let channel = new IDPChannel(onMessage, {
+      provider: proxy.address,
+      protocol: "bogus"
+    });
+  });
+}
+
+function test_verify() {
+  do_test_pending();
+  let verify_message = {
+    type: "VERIFY",
+    id: 2,
+    origin: "https://calling-service.example.com/",
+    message: ASSERTION
+  };
+
+  let server = new HttpServer();
+  server.registerPathHandler('/verify', function(data, response) {
+    var verifierResponse = JSON.stringify({
+      status: "okay",
+      email: USER_IDENTITY,
+      audience: "rtcweb://peerconnection"
+    });
+
+    response.processAsync();
+    response.setStatusLine("1.0", 200, "OK");
+    response.setHeader("Cache-Control", "no-cache", false);
+    response.setHeader("Content-Type", "aplication/json", false);
+    do_timeout(0, function() {
+      response.write(verifierResponse);
+      response.finish();
+    });
+  });
+  server.start(8080);
+
+  let onMessage = function onMessage(message) {
+    switch(message.type) {
+      case "READY":
+        // wait until the next tick so channel will not be undefined
+        do_timeout(0, function sendSignMessage() {
+          channel.send(verify_message);
+        });
+        break;
+      case "SUCCESS":
+        do_check_eq(message.id, verify_message.id);
+        do_check_eq(message.message.identity.name, USER_IDENTITY);
+        do_check_eq(message.message.contents, FINGERPRINT);
+        do_test_finished();
+        server.stop(run_next_test);
+        break;
+      default:
+        do_throw("Weird message type: " + message.type);
+        break;
+    }
+  };
+  let channel = new IDPChannel(onMessage, {
+    PipeConstructor: MockPipe, 
+    HostFrameConstructor: MockHostFrame,
+    verifierUri: "http://localhost:8080/verify"
+  });
+}
+
+// Check that the IDPChannel throws an exception when asked to provide
+// a proxy for an unsupported protocol
+function test_unsupported() {
+  do_test_pending();
+  try {
+    new IDPChannel(function(){}, {protocol: "cupcakes"});
+  } catch(err) {
+    do_check_neq(err);
+    do_test_finished();
+    run_next_test();
+    return;
+  }
+  do_throw("Oops.  Shouldn't have gotten an IDPChannel for unsupported protocol");
+}
+
+function usingIdpProxy(callback) {
+  log("using idp proxy");
+  let proxy = {
+    address: 'http://localhost:' + IDP_PORT,
+    server: new HttpServer()
+  };
+  
+  log("registering paths");
+  proxy.server.registerFile(WELL_KNOWN_PATH, do_get_file("data/rtc_idp" + WELL_KNOWN_PATH));
+  proxy.server.registerFile("bogus.js", do_get_file("data/rtc_idp/bogus.js"));
+
+  proxy.server.start(IDP_PORT);
+  log("started server");
+
+  callback(proxy);
+}
+
+function MockHostFrame() { }
+MockHostFrame.prototype = {
+  getIframe: function getIframe(aFrameSource, aFrameScript, aCallback) {
+    aCallback(null);
+  }
+};
+
+function MockPipe(aOptions, aController) { 
+  this.options = aOptions;
+  this.controller = aController;
+}
+MockPipe.prototype = {
+  close: function close() {},
+  communicate: function communicate() {
+    // here's where we would send our one async message (sign) 
+    // to the hosted iframe.  The iframe would send a
+    // certificate-backed assertion back to us in response, which
+    // we relay to the controller
+    let message = this.options.message;
+    this.controller.receiveResponse({
+      type: "SUCCESS",
+      id: message.id,
+      message: {
+        assertion: ASSERTION
+      }
+    });
+  }
+};
+
+/*
+ * utilities
+ */
+
+function mockPeerConnection(aFingerprint, aFunction) {
+  let mock = {};
+  mock.fingerprint = aFingerprint;
+  mock.signalingState = "open";
+  mock['do'] = aFunction;
+  mock.onidentityresult = partial(aFunction, 'onidentityresult');
+
+  return mock;
+}
+
+/*
+ * add tests to suite and run them
+ */
+
+let TESTS = [ 
+  test_import,
+  test_ready,
+  test_sign,
+  //test_verify,
+  //test_unsupported
+];
+
+TESTS.forEach(add_test);
+
+function run_test() {
+  run_next_test();
+}
+
diff --git a/toolkit/identity/tests/unit/xpcshell.ini b/toolkit/identity/tests/unit/xpcshell.ini
--- a/toolkit/identity/tests/unit/xpcshell.ini
+++ b/toolkit/identity/tests/unit/xpcshell.ini
@@ -6,16 +6,18 @@ tail = tail_identity.js
 [test_load_modules.js]
 [test_minimalidentity.js]
 
 [test_identity_utils.js]
 [test_log_utils.js]
 [test_authentication.js]
 # Identity modules aren't packaged on Android.
 skip-if = os == "android"
+[test_rtcauthmodule.js]
+skip-if = os == "android"
 [test_crypto_service.js]
 skip-if = os == "android"
 [test_identity.js]
 skip-if = os == "android"
 [test_jwcrypto.js]
 skip-if = os == "android"
 [test_observer_topics.js]
 skip-if = os == "android"
