# HG changeset patch
# Parent f04bb353219d3a84fbf60411f10024cd72dbb946
try: -b o -p macosx64,linux64,win32 -u none -t none

diff --git a/browser/base/content/browser-id-signIn.html b/browser/base/content/browser-id-signIn.html
new file mode 100644
--- /dev/null
+++ b/browser/base/content/browser-id-signIn.html
@@ -0,0 +1,152 @@
+<html>
+  <head>
+    <title>Sign In</title>
+    <link href="https://static.login.persona.org/v/09d200fa65/production/en/browserid.css" rel="stylesheet" type="text/css"/>
+    <style type="text/css">
+      .hidden {display: none;}
+    </style>
+  </head>
+  <body>
+
+    <!-- create a persona account or sign in with an existing one -->
+    <div id='wrapper'>
+      <div id="hAlign" class="display_always" style="display: block;">
+        <div id='vAlign' style='height: 343px;'>
+
+            <form id="signUpForm" class="cf authform">
+             <div id='sign-in-box'>
+             <h1 id="title">Sign In To Your Browser</h1>
+             <ul>
+               <li>
+                 <label>To sign in with Persona, please enter your email address.</label>
+                 <input type='text' id='email'/>
+               </li>
+  
+               <li id='password-entry' class='hidden'>
+                 <label id='password-old' class='hidden'>Password</label>
+                 <label id='password-new' class='hidden'>
+                   Your email address is new to us. 
+                   Please create a password to use with Persona.
+                 </label>
+                 <input type='password' id='password' autocomplete='off'/>
+               </li>   
+              </ul>
+
+              <div class='submit cf forminputs start'>
+                <button id='next'>Next</button>
+              </div>
+              <div class='submit cf forminputs'>
+                <button id='signIn' class='hidden'>Sign In</button>
+                <button id='create' class='hidden'>Create Account</button>
+              </div>
+              </div>
+
+              <div id='signed-in-box' class='hidden'>
+                <h1>Great Success!</h1> 
+                <p>You are signed in to your browser with Persona.</p>
+                <p>You may close this tab now.</p>
+              </div>
+            </form>
+
+       </div>
+      </div>
+    </div>
+
+
+    <script type="text/javascript;version=1.8">
+      // XXX make lazy
+      Components.utils.import('resource://gre/modules/identity/IdentityService.jsm');
+
+      let origin = 'https://firefox.com';
+      let email_input = document.getElementById('email');
+      let password_input = document.getElementById('password');
+      let next_button = document.getElementById('next');
+      let signin_button = document.getElementById('signIn');
+      let create_button = document.getElementById('create');
+
+      /**
+       * User enters email and clicks Next.  Check for existing account.
+       * If there is one, move on to 'signin'.  Otherwise move on to 
+       * 'create'.
+       */
+      next_button.addEventListener('click', function(evt) {
+        evt.preventDefault();
+        let email = email_input.value;
+        //disable('email');
+        hide('next');
+
+        IdentityService.accountExists({email:email}, function(info) {
+          console.log(info);
+          show('password-entry');
+          if (info.state === 'unknown') {
+            hide('password-old');
+            show('password-new');
+            show('create');
+          } else {
+            hide('password-new');
+            show('password-old');
+            show('signIn');
+          }
+        });
+      });
+
+      /**
+       * User with an existing account enters password and clicks Sign In.
+       * Move on to yay.
+       */
+      signin_button.addEventListener('click', function(evt) {
+        evt.preventDefault();
+        IdentityService.signIn({
+          email: email_input.value,
+          password: password_input.value,
+          origin: origin,
+          allowUnverified: true}, 
+          yay
+        );
+      });
+
+      /**
+       * User enters a password and clicks Create Account.
+       * Move on to yay.
+       */
+      create_button.addEventListener('click', function(evt) {
+        evt.preventDefault();
+        IdentityService.createAccount({
+          email: email_input.value,
+          password: password_input.value,
+          origin: origin,
+          allowUnverified: true}, 
+          yay
+        );
+      });
+
+      /**
+       * Completing either 'signin' or 'create', we check to see if a 
+       * valid assertion was returned.  If so, Great success!  If not,
+       * start again and get an email.
+       */
+      function yay(assertion) {
+        if (assertion) {
+          show('signed-in-box');
+          hide('sign-in-box');
+          console.log("got assertion - hid forms");
+        } else {
+          hide('signed-in-box');
+          show('sign-in-box');
+          hide('password-entry');
+          show('email');
+          show('next');
+        }
+      }
+
+      function show(id) {
+        document.getElementById(id).classList.remove('hidden');
+      }
+
+      function hide(id) {
+        document.getElementById(id).classList.add('hidden');
+      }
+
+    </script>
+  </body>
+</html>
diff --git a/browser/base/content/browser-identity.js b/browser/base/content/browser-identity.js
--- a/browser/base/content/browser-identity.js
+++ b/browser/base/content/browser-identity.js
@@ -16,48 +16,89 @@ XPCOMUtils.defineLazyGetter(this, "logge
   Cu.import('resource://gre/modules/identity/LogUtils.jsm');
   return getLogger("Identity", "toolkit.identity.debug");
 });
 
 function IdentityShim() {
   this.isLoaded = false;
 }
 
+function parseResult(val) {
+  if (typeof val === 'string') {
+    try {
+      return JSON.parse(val);
+    } catch (err) {
+      return {error: "Bad return value: " + err}
+    }
+  }
+  return val;
+}
+
 IdentityShim.prototype = {
   init: function IdentityShim_init() {
     addMessageListener('identity-delegate-watch', this);
     addMessageListener('identity-delegate-request', this);
     addMessageListener('identity-delegate-logout', this);
+
+    addMessageListener('identity-delegate-getIdentity', this);
+    addMessageListener('identity-delegate-signIn', this);
+    addMessageListener('identity-delegate-signOut', this);
+    addMessageListener('identity-delegate-accountExists', this);
+
     sendAsyncMessage('identity-delegate-loaded');
     logger.log('sent identity-delegate-loaded');
     this.isLoaded = true;
   },
 
   uninit: function IdentityShim_uninit() {
     if (this.isLoaded) {
       removeMessageListener('identity-delegate-watch', this);
       removeMessageListener('identity-delegate-request', this);
       removeMessageListener('identity-delegate-logout', this);
+
+      removeMessageListener('identity-delegate-getIdentity', this);
+      removeMessageListener('identity-delegate-signIn', this);
+      removeMessageListener('identity-delegate-signOut', this);
+      removeMessageListener('identity-delegate-accountExists', this);
+
       sendAsyncMessage('identity-delegate-complete', null);
       logger.log('sent identity-delegate-complete');
       this.isLoaded = false;
     }
   },
 
   receiveMessage: function IdentityShim_receiveMessage(aMessage) {
+    let options = aMessage.json;
     switch (aMessage.name) {
       case 'identity-delegate-watch':
-        this.watch(aMessage.json);
+        this.watch(options);
         break;
       case 'identity-delegate-request':
-        this.request(aMessage.json);
+        this.request(options);
         break;
       case 'identity-delegate-logout':
-        this.logout(aMessage.json);
+        this.logout(options);
         break;
+
+      case 'identity-delegate-getIdentity':
+        this.getIdentity(options);
+        break;
+      case 'identity-delegate-signIn':
+        this.signIn(options);
+        break;
+      case 'identity-delegate-signOut':
+        this.signOut(options);
+        break;
+      case 'identity-delegate-accountExists':
+        this.accountExists(options);
+        break;
+      case 'identity-delegate-createAccount':
+        this.createAccount(options);
+        break;
+  
       default:
         //logger.error("received unexpected message:", aMessage.name);
         break;
     }
   },
 
   _identityDoMethod: function IdentityShim__identityDoMethod(message) {
     sendAsyncMessage('identity-service-doMethod', message);
@@ -66,69 +107,174 @@ IdentityShim.prototype = {
   _close: function IdentityShim__close() {
     this.uninit();
   },
 
   watch: function IdentityShim_watch(options) {
     logger.log('doInternalWatch: isLoaded:', this.isLoaded, 'options:', options);
     if (options) {
       let BrowserID = content.wrappedJSObject.BrowserID;
-      let callback = function(aParams, aInternalParams) {
+      let callback = function shim_watchCallback(aParams, aInternalParams) {
         this._identityDoMethod(aParams);
         if (aParams.method === 'ready') {
           this._close();
         }
       }.bind(this);
 
       BrowserID.internal.watch(
         callback,
         JSON.stringify(options),
         function(...things) {
-          logger.log('internal watch returned:', things);
+          logger.log('BrowserID internal watch:', things);
         }
       );
     }
   },
 
   request: function IdentityShim_request(options) {
     logger.log('doInternalRequest: isLoaded:', this.isLoaded, 'options:', options);
     if (options) {
-      var stringifiedOptions = JSON.stringify(options);
-      let callback = function(assertion, internalParams) {
+      let stringifiedOptions = JSON.stringify(options);
+      let callback = function shim_requestCallback(assertion, internalParams) {
         internalParams = internalParams || {};
-        if (assertion) {
-          logger.log("got assertion");
-          this._identityDoMethod({
-            method: 'login',
-            assertion: assertion,
-            _internal: options._internal,
-            _internalParams: internalParams});
-        }
+        this._identityDoMethod({
+          method: 'login',
+          assertion: assertion,
+          _internal: options._internal,
+          _internalParams: internalParams});
         this._close();
       }.bind(this);
 
       content.wrappedJSObject.BrowserID.internal.get(
         options.origin,
         callback,
         stringifiedOptions
       );
     }
   },
 
   logout: function IdentityShim_logout(options) {
     logger.log('doInternalLogout: isLoaded:', this.isLoaded, 'options:', options);
     if (options) {
       let BrowserID = content.wrappedJSObject.BrowserID;
-      let callback = function() {
+      let callback = function shim_logoutCallback() {
         this._identityDoMethod({method: 'logout', _internal: options._internal});
         this._close();
       }.bind(this);
 
       BrowserID.internal.logout(options.origin, callback);
     }
+  },
+
+  /*
+   * Get identity for browser
+   */
+  getIdentity: function IdentityShim_getIdentity(options) {
+    let stringifiedOptions = JSON.stringify(options);
+    let callback = function shim_getIdentityCallback(err, assertion, internalParams) {
+      logger.log("got identity:", assertion);
+      internalParams = internalParams || {};
+      this._identityDoMethod({
+        method: 'getIdentity',
+        assertion: assertion,
+        _internal: options._internal,
+        _internalParams: internalParams});
+      this._close();
+    }.bind(this);
+
+    content.wrappedJSObject.BrowserID.internal.getIdentity(
+      options.origin,
+      callback,
+      stringifiedOptions
+    );
+    logger.log("called internal getIdentity");
+  },
+
+  /*
+   * Sign in to browser
+   */
+  signIn: function IdentityShim_signIn(options) {
+    logger.log("signin with options", options);
+    let stringifiedOptions = JSON.stringify(options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+
+    let callback = function shim_signInCallback(err, assertion, internalParams) {
+      internalParams = internalParams || {};
+      logger.log("got err, assertion", err, assertion);
+      this._identityDoMethod({
+        method: 'signIn',
+        assertion: assertion,
+        error: err,
+        _internal: options._internal,
+        _internalParams: internalParams});
+    }.bind(this);
+
+    logger.log("calling signIn:", stringifiedOptions);
+    BrowserID.internal.signIn(stringifiedOptions, callback);
+  },
+
+  /*
+   * Sign out of browser
+   */
+
+  signOut: function IdentityShim_signOut(options) {
+    logger.log("signout with options", options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+    let stringifiedOptions = JSON.stringify(options);
+
+    let callback = function shim_signOutCallback() {
+      this._identityDoMethod({method: 'signOut', _internal: options._internal});
+      this._close();
+    }.bind(this);
+
+    BrowserID.internal.signOut(stringifiedOptions, callback);
+  },
+
+  /*
+   * Test whether an account exists
+   */
+  accountExists: function IdentityShim_accountExists(options) {
+    logger.log("check account exists", options);
+    let stringifiedOptions = JSON.stringify(options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+
+    let callback = function shim_accountExistsCallback(err, exists) {
+      exists = parseResult(exists);
+      this._identityDoMethod({
+        id: options.id,
+        error: err,
+        method: 'accountExists',
+        exists: exists});
+    }.bind(this);
+
+    BrowserID.internal.accountExists(stringifiedOptions, callback);
+  },
+
+  /*
+   * Create user from browser
+   */
+  createAccount: function IdentityShim_createAccount(options) {
+    logger.log("create user with options", options);
+    let stringifiedOptions = JSON.stringify(options);
+    let BrowserID = content.wrappedJSObject.BrowserID;
+
+    let callback = function shim_createAccountCallback(err, assertion, internalParams) {
+      logger.log("got assertion", assertion);
+      this._identityDoMethod({
+        id: options.id,
+        error: err,
+        method: 'createAccount',
+        assertion: assertion,
+        email: options.email,
+        origin: options.origin,
+        _internal: options._internal,
+        _internalParams: internalParams});
+    }.bind(this);
+
+    BrowserID.internal.createAccount(stringifiedOptions, callback);
   }
 };
 
 this.shim = null;
 
 addEventListener('DOMContentLoaded', function(e) {
   content.addEventListener('load', function(e) {
     logger.log('content loaded');
@@ -138,9 +284,8 @@ addEventListener('DOMContentLoaded', fun
 });
 
 content.addEventListener('beforeunload', function(e) {
   if (this.shim) {
     this.shim.uninit();
   }
 });
 
-
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -54,16 +54,17 @@ browser.jar:
 #endif
         content/browser/aboutRobots-icon.png          (content/aboutRobots-icon.png)
         content/browser/aboutRobots-widget-left.png   (content/aboutRobots-widget-left.png)
         content/browser/aboutSocialError.xhtml        (content/aboutSocialError.xhtml)
 *       content/browser/browser.css                   (content/browser.css)
 *       content/browser/browser.js                    (content/browser.js)
 *       content/browser/browser.xul                   (content/browser.xul)
         content/browser/browser-identity.js           (content/browser-identity.js)
+        content/browser/browser-id-signIn.html        (content/browser-id-signIn.html)
 *       content/browser/browser-tabPreviews.xml       (content/browser-tabPreviews.xml)
         content/browser/content.js                    (content/content.js)
         content/browser/newtab/newTab.xul             (content/newtab/newTab.xul)
 *       content/browser/newtab/newTab.js              (content/newtab/newTab.js)
         content/browser/newtab/newTab.css             (content/newtab/newTab.css)
         content/browser/newtab/preload.xhtml          (content/newtab/preload.xhtml)
 *       content/browser/pageinfo/pageInfo.xul         (content/pageinfo/pageInfo.xul)
 *       content/browser/pageinfo/pageInfo.js          (content/pageinfo/pageInfo.js)
diff --git a/browser/modules/SignInToWebsite.jsm b/browser/modules/SignInToWebsite.jsm
--- a/browser/modules/SignInToWebsite.jsm
+++ b/browser/modules/SignInToWebsite.jsm
@@ -11,16 +11,19 @@ const Ci = Components.interfaces;
 const Cu = Components.utils;
 
 Cu.import('resource://gre/modules/Services.jsm');
 Cu.import('resource://gre/modules/XPCOMUtils.jsm');
 Cu.import('resource://gre/modules/identity/IdentityUtils.jsm');
 
 const kInteractivePersonaIframe = 'https://picl.personatest.org/sign_in#NATIVE';
 const kHiddenPersonaIframe = 'https://picl.personatest.org/communication_iframe';
+//const kIdentityScreen = 'http://127.0.0.1:10002/sign_in#NATIVE';
+//const kIdentityFrame = 'http://127.0.0.1:10002/communication_iframe';
+const kIdentityShim = 'chrome://browser/content/browser-identity.js';
 
 const PANEL_MIN_HEIGHT = 440;
 const PANEL_MIN_WIDTH = 300;
 
 XPCOMUtils.defineLazyModuleGetter(this, 'IdentityService',
                                   'resource://gre/modules/identity/IdentityService.jsm');
 
 XPCOMUtils.defineLazyGetter(this, "logger", function() {
@@ -179,16 +182,17 @@ HostFrame.prototype = {
 
   cleanUp: function HostFrame_cleanUp() {
     if (this._resizeWatcher) {
       this._resizeWatcher.stop();
     }
   },
 
   _createIframe: function HostFrame_createIframe(aOptions) {
+    logger.log("options:", aOptions);
     let hiddenDoc = Services.appShell.hiddenDOMWindow.document;
     this._iframe = hiddenDoc.createElementNS('http://www.w3.org/1999/xhtml', 'iframe');
 
     this._iframe.setAttribute('mozbrowser', true);
     this._iframe.setAttribute('mozframetype', 'content');
     this._iframe.setAttribute('type', 'content');
     this._iframe.setAttribute('remote', true);
     this._iframe.setAttribute('id', 'persona-host-frame');
@@ -303,23 +307,35 @@ Pipe.prototype = {
 this.SignInToWebsiteUX = {
   init: function SignInToWebsiteUX_init(pipeConstructor) {
     this.PipeConstructor = pipeConstructor || Pipe;
     this.contexts = {};
     Services.obs.addObserver(this, 'identity-controller-watch', false);
     Services.obs.addObserver(this, 'identity-controller-request', false);
     Services.obs.addObserver(this, 'identity-controller-logout', false);
     Services.obs.addObserver(this, 'identity-controller-canceled', false);
+
+    Services.obs.addObserver(this, 'identity-controller-getIdentity', false);
+    Services.obs.addObserver(this, 'identity-controller-signIn', false);
+    Services.obs.addObserver(this, 'identity-controller-signOut', false);
+    Services.obs.addObserver(this, 'identity-controller-accountExists', false);
+    Services.obs.addObserver(this, 'identity-controller-createAccount', false);
   },
 
   uninit: function SignInToWebsiteUX_uninit() {
     Services.obs.removeObserver(this, 'identity-controller-watch');
     Services.obs.removeObserver(this, 'identity-controller-request');
     Services.obs.removeObserver(this, 'identity-controller-logout');
     Services.obs.removeObserver(this, 'identity-controller-canceled');
+
+    Services.obs.removeObserver(this, 'identity-controller-getIdentity');
+    Services.obs.removeObserver(this, 'identity-controller-signIn');
+    Services.obs.removeObserver(this, 'identity-controller-signOut');
+    Services.obs.removeObserver(this, 'identity-controller-accountExists');
+    Services.obs.removeObserver(this, 'identity-controller-createAccount');
   },
 
   observe: function SignInToWebsiteUX_observe(aSubject, aTopic, aData) {
     logger.log('controller observed:', aTopic);
     // XXX need to detect page unload of any of our flows
     // XXX we get strings from xul, and objects from elsewhere
     let rpOptions = {};
     if (aSubject) {
@@ -330,17 +346,17 @@ this.SignInToWebsiteUX = {
       }
     }
     if (!rpOptions.id) {
       logger.error('Got a message with no RP id');
       return;
     }
 
     let rpId = rpOptions.id;
-    let UI = getUIForWindowID(rpId);
+    //let UI = getUIForWindowID(rpId);
 
     let options = {
       id: rpOptions.id,
       rpOptions: rpOptions
     };
 
     switch (aTopic) {
       case 'identity-controller-watch':
@@ -350,16 +366,36 @@ this.SignInToWebsiteUX = {
       case 'identity-controller-request':
         this.doRequest(options);
         break;
 
       case 'identity-controller-logout':
         this.doLogout(options);
         break;
 
+      case 'identity-controller-getIdentity':
+        this.doGetIdentity(options);
+        break;
+
+      case 'identity-controller-signIn':
+        this.doSignIn(options);
+        break;
+
+      case 'identity-controller-signOut':
+        this.doSignOut(options);
+        break;
+
+      case 'identity-controller-accountExists':
+        this.doAccountExists(options);
+        break;
+
+      case 'identity-controller-createAccount':
+        this.doCreateAccount(options);
+        break;
+
       default:
         logger.error('SignInToWebsiteUX', 'Unknown observer notification:', aTopic);
         break;
     }
   },
 
   serviceDoMethod: function SignInToWebsiteUX_doMethod(aMessage, aId) {
     logger.log('serviceDoMethod received:', aMessage);
@@ -379,16 +415,36 @@ this.SignInToWebsiteUX = {
       case 'logout':
         IdentityService.doLogout(aId);
         break;
 
       case 'cancel':
         IdentityService.doCancel(aId);
         break;
 
+      case 'getIdentity':
+        IdentityService.doGetIdentity(aId, aMessage.assertion);
+        break;
+
+      case 'signIn':
+        IdentityService.doSignIn(aId, aMessage.assertion);
+        break;
+
+      case 'signOut':
+        IdentityService.doSignOut(aId);
+        break;
+
+      case 'accountExists':
+        IdentityService.doAccountExists(aId, aMessage.exists);
+        break;
+
+      case 'createAccount':
+        IdentityService.doCreateAccount(aId, aMessage.assertion);
+        break;
+
       default:
         logger.error('Unknown identity method: ' + aMessage.method);
         break;
     }
   },
 
   cleanUp: function SignInToWebsiteUX_cleanUp(aId) {
     let context = this.contexts[aId];
@@ -439,10 +495,47 @@ this.SignInToWebsiteUX = {
     this.delegate(aOptions);
   },
 
   doLogout: function SignInToWebsiteUX_doLogout(aOptions) {
     aOptions.message = 'identity-delegate-logout';
     aOptions.src = kHiddenPersonaIframe;
     aOptions.showUI = false;
     this.delegate(aOptions);
-  }
+  },
+
+  doGetIdentity: function SignInToWebsiteUX_doGetIdentity(aOptions) {
+    logger.log("delegating getIdentity:" , aOptions);
+    aOptions.message = 'identity-delegate-getIdentity';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doSignIn: function SignInToWebsiteUX_doSignIn(aOptions) {
+    logger.log("delegating signin:" , aOptions);
+    aOptions.message = 'identity-delegate-signIn';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doSignOut: function SignInToWebsiteUX_doSignOut(aOptions) {
+    aOptions.message = 'identity-delegate-signOut';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doAccountExists: function SignInToWebsiteUX_doSignOut(aOptions) {
+    aOptions.message = 'identity-delegate-accountExists';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
+
+  doCreateAccount: function SignInToWebsiteUX_doCreateAccount(aOptions) {
+    aOptions.message = 'identity-delegate-createAccount';
+    aOptions.src = kHiddenPersonaIframe;
+    aOptions.showUI = false;
+    this.delegate(aOptions);
+  },
 };
